[ ]{0: LDARGS}                           // main 命令行参数 n = 0
[ 5 ]{1: CALL 1 5}                       // 调用 位于5 的 main(0) 函数 参数个数为1 返回地址4,old bp地址-999以及参数n:5   
[ 4 -999 5 ]{5: INCSP 1}                 // 因为定义了int r需要给局部变量r流一个位置，因此INCSP 1 新增出来的位置这里的默认值是0(不过好像是不一定的)          
[ 4 -999 5 0 ]{7: GETBP}                 // 返回bp:2          
[ 4 -999 5 0 2 ]{8: CSTI 1}              // 添加1             
[ 4 -999 5 0 2 1 ]{10: ADD}              // 相加得到n的地址             
[ 4 -999 5 0 3 ]{11: GETBP}              // 返回bp:2             
[ 4 -999 5 0 3 2 ]{12: LDI}              // 将栈帧上相对栈底2的位置也就是5入栈             
[ 4 -999 5 0 3 5 ]{13: STI}              // s[3] = 5             
[ 4 -999 5 5 5 ]{14: GETBP}              // 返回bp:2              
[ 4 -999 5 5 5 2 ]{15: LDI}              // 将栈帧上相对栈底2的位置也就是5入栈             
[ 4 -999 5 5 5 5 ]{16: GETBP}            // 返回bp:2               
[ 4 -999 5 5 5 5 2 ]{17: CSTI 2}         // 添加2                  
[ 4 -999 5 5 5 5 2 2 ]{19: ADD}          // 相加得到r的地址                 
[ 4 -999 5 5 5 5 4 ]{20: CALL 2 41}      // 调用位于41的square 传入参数n的值以及r的地址                     
[ 4 -999 5 5 5 23 2 5 4 ]{41: GETBP}     // 返回的地址是23,old bp:2,以及参数n的值与r的地址 返回新的bp:7                    
[ 4 -999 5 5 5 23 2 5 4 7 ]{42: CSTI 1}  // 添加1                         
[ 4 -999 5 5 5 23 2 5 4 7 1 ]{44: ADD}   // 相加得到square中r的地址                        
[ 4 -999 5 5 5 23 2 5 4 8 ]{45: LDI}     // 将栈帧上相对栈底8的位置4压入栈中                      
[ 4 -999 5 5 5 23 2 5 4 4 ]{46: GETBP}   // 返回bp:7                        
[ 4 -999 5 5 5 23 2 5 4 4 7 ]{47: LDI}   // 将栈帧上相对栈底7的位置5压入栈中                        
[ 4 -999 5 5 5 23 2 5 4 4 5 ]{48: GETBP} // 返回bp:7                          
[ 4 -999 5 5 5 23 2 5 4 4 5 7 ]{49: LDI} // 将栈帧上相对栈底7的位置5压入栈中                          
[ 4 -999 5 5 5 23 2 5 4 4 5 5 ]{50: MUL} // 5 * 5 = 25                          
[ 4 -999 5 5 5 23 2 5 4 4 25 ]{51: STI}  // s[4] = 25                         
[ 4 -999 5 5 25 23 2 5 4 25 ]{52: RET 2} // 去除掉栈中的2个值5 4以及 地址23 old bp:2 并返回第2个值也就是25                       
[ 4 -999 5 5 25 25 ]{23: INCSP -1}       // 可能是删除square传来的25                    
[ 4 -999 5 5 25 ]{25: GETBP}             // 返回bp:2              
[ 4 -999 5 5 25 2 ]{26: CSTI 2}          // 添加2                 
[ 4 -999 5 5 25 2 2 ]{28: ADD}           // 返回r的地址                
[ 4 -999 5 5 25 4 ]{29: LDI}             // s[4]              
[ 4 -999 5 5 25 25 ]{30: PRINTI}         // 打印25                  
25 [ 4 -999 5 5 25 25 ]{31: INCSP -2}    // 释放n和r的空间                       
[ 4 -999 5 5 ]{33: GETBP}                // 返回bp:2           
[ 4 -999 5 5 2 ]{34: CSTI 1}             // 添加1              
[ 4 -999 5 5 2 1 ]{36: ADD}              // 获得n的值             
[ 4 -999 5 5 3 ]{37: LDI}                // s[3]           
[ 4 -999 5 5 5 ]{38: PRINTI}             // 打印r              
5 [ 4 -999 5 5 5 ]{39: RET 2}            // bp是2,2 + 2 = 4, 返回s[4]也就是5 去掉地址4 bp -999以及2个值               
[ 5 ]{4: STOP}                           // 终止